from aiogram import types
from aiogram.dispatcher import Dispatcher
from db import (
    add_user, get_user_role, create_ticket,
    get_user_tickets, get_open_tickets,
    assign_ticket, close_ticket
)


ADMINS = [7963375756]  

async def start_handler(message: types.Message):
    await add_user(message.from_user.id, message.from_user.username)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π /new_ticket —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç.")

async def new_ticket_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/new_ticket –£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º.")
        return
    await create_ticket(message.from_user.id, args)
    await message.answer("‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω! –ú—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.")

async def my_tickets_handler(message: types.Message):
    tickets = await get_user_tickets(message.from_user.id)
    if not tickets:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
        return
    response = "üé´ –í–∞—à–∏ —Ç–∏–∫–µ—Ç—ã:\n"
    for tid, msg, status in tickets:
        response += f"#{tid} [{status}]: {msg}\n"
    await message.answer(response)

async def list_open_tickets_handler(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if role not in ["staff", "admin"]:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    tickets = await get_open_tickets()
    if not tickets:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
        return

    for tid, uid, msg in tickets:
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(f"–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç #{tid}", callback_data=f"assign_{tid}"))
        await message.answer(f"–¢–∏–∫–µ—Ç #{tid} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}:\n{msg}", reply_markup=keyboard)

async def callback_handler(callback: types.CallbackQuery):
    data = callback.data
    if data.startswith("assign_"):
        ticket_id = int(data.split("_")[1])
        await assign_ticket(ticket_id, callback.from_user.id)
        await callback.message.edit_text(f"–¢–∏–∫–µ—Ç #{ticket_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É {callback.from_user.full_name}")
    await callback.answer()

async def close_ticket_command(message: types.Message):
    role = await get_user_role(message.from_user.id)
    if role not in ["staff", "admin"]:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —Ç–∏–∫–µ—Ç—ã.")
        return

    args = message.get_args()
    if not args.isdigit():
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∏–∫–µ—Ç–∞: /close_ticket 1")
        return

    await close_ticket(int(args))
    await message.answer(f"‚úÖ –¢–∏–∫–µ—Ç #{args} –∑–∞–∫—Ä—ã—Ç.")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_handler, commands=["start"])
    dp.register_message_handler(new_ticket_handler, commands=["new_ticket"])
    dp.register_message_handler(my_tickets_handler, commands=["my_tickets"])
    dp.register_message_handler(list_open_tickets_handler, commands=["tickets"])
    dp.register_message_handler(close_ticket_command, commands=["close_ticket"])
    dp.register_callback_query_handler(callback_handler)
